const EC = require('elliptic').ec;
const uuidV1 = require('uuid/v1'); // used to generate unique id for each user based on TimeStamp
const ec = EC('secp256k1'); // standards of effiecient cryptography p- prime  256 bits k - koblet name of mathematician in cryptography
//ec used for wallets for generating private and public keys.
const SHA256 = require('crypto-js/sha256'); // for generating unique SHA256 hash acc. to data.


class ChainUtil{
  static genKeyPair(){
    return ec.genKeyPair();
  } // generate a unique public key and private key pair.

  static id(){
    return uuidV1();
  } // return unique acc. to TimeStamp.

  static hash(data){
    return SHA256(JSON.stringify(data)).toString();
  } // stringify the data passed and then pass it in function SHA256 which will return unique hash value
  //toString converts number into string

  static verifySignature(publicKey, signature, data){
    return ec.keyFromPublic(publicKey, 'hex').verify(data, signature);
  }// this function is used verify the signature, hex written here used to tell ec that that public key is in hex form and keyFromPublic is function of class EC .verify defins it method passing data and signature which is generated by ec function.
}

module.exports = ChainUtil;
//Exports the class
